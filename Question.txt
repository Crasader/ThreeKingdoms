1.我们在Windows下使用Visual Studio 2012开发游戏的时候，使用标签中包含中文时候会出现乱码或无法显示!

出现乱码或无法显示的原因是由于在Windows中文环境下使用Visual Studio创建的源程序文件是采用GBK编码。
解决方法很简单，我们只需要把HelloWorldScene.cpp文件另存为UTF-8就可以了，用记事本等文本编辑工具打然后另存为UTF-8就可以，
或者是在Visual Studio工具中可以选择菜单文件→高级保存选项，在弹出如下图所示对话框，选择编码为Unicode(UTF-8无签名)，然后点击确定按钮保存。

注意不能保存为Unicode(UTF-8带签名)。

2.cocos2dx 3.x中的各种回调函数：
回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。
创建回调函数的几种方法：
1.传统方法
2.CC_CALLBACK_1等
3.使用lambda表达式

几种回调函数的使用：
1.按钮回调
		auto item1 = MenuItemImage::create(s_PlayNormal, s_PlaySelect, CC_CALLBACK_1(MenuLayer2::menuCallback, this));
        auto item2 = MenuItemImage::create(s_HighNormal, s_HighSelect, CC_CALLBACK_1(MenuLayer2::menuCallbackOpacity, this));
        auto item3 = MenuItemImage::create(s_AboutNormal, s_AboutSelect, CC_CALLBACK_1(MenuLayer2::menuCallbackAlign, this));
        
        item1->setScaleX( 1.5f );
        item2->setScaleX( 0.5f );
        item3->setScaleX( 0.5f );
        
        auto menu = Menu::create(item1, item2, item3, nullptr);
        
        auto s = Director::getInstance()->getWinSize();
        menu->setPosition(Vec2(s.width/2, s.height/2));

        menu->setTag( kTagMenu );
        
        addChild(menu, 0, 100+i);
2.定时器回调
    schedule(CC_SCHEDULE_SELECTOR(SchedulerAutoremove::autoremove), 0.5f);
    schedule(CC_SCHEDULE_SELECTOR(SchedulerAutoremove::tick), 0.5f);
	void SchedulerAutoremove::autoremove(float dt);
	void SchedulerAutoremove::tick(float dt)
3.触屏事件回调
	第一种：
	listener1->onTouchBegan = [](Touch* touch, Event* event){};
	第二种：
	touchEvt->onTouchBegan       =   CC_CALLBACK_2(HelloWorld::onTouchBegan,this);
	bool HelloWorld::onTouchBegan(cocos2d::Touch* touch,cocos2d::Event* evt) ;
4.动作回调
static CallFunc * create(const std::function<void()>& func);
static CallFuncN * create(const std::function<void(Node*)>& func);
可见:CallFunc和CallFuncN的参数都是一个函数指针
		CallFunc::create( CC_CALLBACK_0(ActionSequence2::callback1,this)),
		CallFunc::create( CC_CALLBACK_0(ActionSequence2::callback2,this,_grossini)),
		CallFunc::create( CC_CALLBACK_0(ActionSequence2::callback3,this,_grossini,0xbebabeba)),
		
		void ActionSequence2::callback1()
		void ActionSequence2::callback2(Node* sender)
		void ActionSequence2::callback3(Node* sender, long data)
		
		CallFuncN::create( CC_CALLBACK_1(ActionCallFuncN::callback, this)),
		void ActionCallFuncN::callback(Node* sender )
5.自定义事件回调
_listener = cocos2d::EventListenerCustom::create("Issue9898", [&](cocos2d::EventCustom *event){
        _eventDispatcher->removeEventListener(_listener);
        _eventDispatcher->dispatchCustomEvent("Issue9898");
    });

// new callbacks based on C++11
#define CC_CALLBACK_0(__selector__,__target__, ...) std::bind(&__selector__,__target__, ##__VA_ARGS__)
#define CC_CALLBACK_1(__selector__,__target__, ...) std::bind(&__selector__,__target__, std::placeholders::_1, ##__VA_ARGS__)
#define CC_CALLBACK_2(__selector__,__target__, ...) std::bind(&__selector__,__target__, std::placeholders::_1, std::placeholders::_2, ##__VA_ARGS__)
#define CC_CALLBACK_3(__selector__,__target__, ...) std::bind(&__selector__,__target__, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, ##__VA_ARGS__)
其中：
__selector__表示要调用的函数名称
__target__表示__selector__的第一个参数，
这两个是必须的。
std::placeholders::_x表示占位符，其中的x与CC_CALLBACK_x的x对应
举例：
armature->getAnimation()->setFrameEventCallFunc(CC_CALLBACK_0(TestColliderDetector::onFrameEvent, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4));
void TestColliderDetector::onFrameEvent(cocostudio::Bone *bone, const std::string& evt, int originFrameIndex, int currentFrameIndex)